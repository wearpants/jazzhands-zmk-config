/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define STD_L 0
#define STD_123_L 1
#define CMD_L 2
#define FN_L 3

#define LP 0
#define LR 1
#define LM 2
#define LI 3

#define RI 4
#define RM 5
#define RR 6
#define RP 7

#define A_POS LP
#define S_POS LR
#define E_POS LM
#define T_POS LI

#define N_POS RI
#define I_POS RM
#define O_POS RR
#define P_POS RP

#define N1_POS LP
#define N2_POS LR
#define N3_POS LM
#define N4_POS LI

#define N7_POS RI
#define N8_POS RM
#define N9_POS RR
#define N0_POS RP

#define COMBO_TIMEOUT 150

#define COMBO(LAYER,POS,USAGE) \
      combo_##USAGE { \
      	timeout-ms = <COMBO_TIMEOUT>; \
	key-positions = <POS>; \
	layers = <LAYER>; \
	bindings = <&kp USAGE>; \
      };

// Override some settings for existing behaviors
&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ { 
	standard_mod_morphs {
		ques_slash: ques_slash {
			compatible = "zmk,behavior-mod-morph";
			label = "QUES_SLASH";
			#binding-cells = <0>;
			bindings = <&kp LS(SLASH)>, <&kp SLASH>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
			keep-mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		bang_at: bang_at {
			compatible = "zmk,behavior-mod-morph";
			label = "BANG_AT";
			#binding-cells = <0>;
			bindings = <&kp LS(N1)>, <&kp LS(N2)>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		lpar_bracket: lpar_bracket {
			compatible = "zmk,behavior-mod-morph";
			label = "LPAR_BRKT";
			#binding-cells = <0>;
			bindings = <&kp LPAR>, <&kp LBKT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		rpar_bracket: rpar_bracket {
			compatible = "zmk,behavior-mod-morph";
			label = "RPAR_BRKT";
			#binding-cells = <0>;
			bindings = <&kp RPAR>, <&kp RBKT>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};

	combos {
		compatible = "zmk,combos";
		
		COMBO(STD_L, T_POS N_POS, B)
		
		COMBO(STD_L, A_POS N_POS, Q)

		combo_BANG_AT {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <I_POS P_POS>;
			layers = <STD_L STD_123_L>;
			bindings = <&bang_at>;
		};
		
		COMBO(STD_L, S_POS E_POS, D)
		COMBO(STD_L, T_POS O_POS, G)
		
		COMBO(STD_L, A_POS T_POS, F)
		COMBO(STD_L, N_POS P_POS, M)
		
		COMBO(STD_L, S_POS I_POS, K)
		
		COMBO(STD_L, S_POS N_POS, J)
		COMBO(STD_L, I_POS O_POS, L)
		
		COMBO(STD_L, A_POS S_POS, W)
		COMBO(STD_L STD_123_L, E_POS P_POS, QUOT)
		
		COMBO(STD_L, E_POS T_POS, R)
		COMBO(STD_L, N_POS I_POS, H)
		
		COMBO(STD_L, S_POS T_POS, C)
		COMBO(STD_L, N_POS O_POS, U)
		
		COMBO(STD_L, A_POS E_POS, X)
		COMBO(STD_L STD_123_L, T_POS P_POS, BACKSPACE)
		
		COMBO(STD_L, T_POS I_POS, V)
		
		COMBO(STD_L, E_POS N_POS, Y)
		
		COMBO(STD_L, A_POS I_POS, Z)
		COMBO(STD_L STD_123_L, O_POS P_POS, SEMI)
		
		COMBO(STD_L STD_123_L, E_POS I_POS, COMMA)
		
		COMBO(STD_L STD_123_L, S_POS O_POS, DOT)
		
		combo_QUES_SLASH {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <A_POS P_POS>;
			layers = <STD_L STD_123_L>;
			bindings = <&ques_slash>;
		};

		combo_LPAR_BRKT {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <A_POS O_POS>;
			layers = <STD_L STD_123_L>;
			bindings = <&lpar_bracket>;
		};

		combo_RPAR_BRKT {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <S_POS P_POS>;
			layers = <STD_L STD_123_L>;
			bindings = <&rpar_bracket>;
		};
		
		COMBO(STD_L STD_123_L, E_POS O_POS, MINUS)
		
		COMBO(STD_L STD_123_L, A_POS S_POS E_POS T_POS, TAB)
		COMBO(STD_L STD_123_L, N_POS I_POS O_POS P_POS, RET)
		
		COMBO(STD_123_L, N3_POS N4_POS, N5)
		COMBO(STD_123_L, N7_POS N8_POS, N6)

		COMBO(STD_123_L, N1_POS N7_POS, TILDE)
		COMBO(STD_123_L, N4_POS N7_POS, EQUAL)
		COMBO(STD_123_L, N1_POS N8_POS, BSLH)

		combo_std_to_std_123 {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <A_POS T_POS N_POS P_POS>;
			layers = <STD_L>;
			bindings = <&to STD_123_L>;
		};
		
		combo_132_to_std {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <A_POS T_POS N_POS P_POS>;
			layers = <STD_123_L>;
			bindings = <&to STD_L>;
		};

		combo_std_to_cmd {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <S_POS E_POS I_POS O_POS>;
			layers = <STD_L>;
			bindings = <&to CMD_L>;
		};
		
		combo_cmd_to_std {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <E_POS S_POS I_POS O_POS>;
			layers = <CMD_L>;
			bindings = <&to STD_L>;
		};

		combo_std_to_fn {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <A_POS S_POS O_POS P_POS>;
			layers = <STD_L>;
			bindings = <&to FN_L>;
		};
		
		combo_fn_to_std {
			timeout-ms = <COMBO_TIMEOUT>;
			key-positions = <A_POS S_POS O_POS P_POS>;
			layers = <FN_L>;
			bindings = <&to STD_L>;
		};
	};

	keymap {
		compatible = "zmk,keymap";

		standard_layer {
			bindings = <
&kp A  &kp S  &kp E  &kp T              &kp N  &kp I  &kp O  &kp P 
                     &kp LSHIFT         &kp SPACE
				>;
		};

		standard_123_layer {
			bindings = <
&kp N1 &kp N2 &kp N3 &kp N4             &kp N7 &kp N8  &kp N9   &kp N0 
                     &trans             &trans
				>;
		};

		cmd_layer {
			bindings = <
&sk LCTRL &sk LSFT &sk LALT &sk LGUI    &kp LEFT &kp DOWN  &kp UP   &kp RIGHT 
                            &kp PGDN    &kp PGUP
				>;
		};

		fn_layer {
			bindings = <
&none     &none    &none    &bt BT_CLR    &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3 
                            &trans        &trans
				>;
		};
	
	};
};
